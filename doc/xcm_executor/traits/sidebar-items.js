window.SIDEBAR_ITEMS = {"enum":[["Error","Errors associated with [`MatchesFungibles`] operation."],["FeeReason","Context under which a fee is paid."],["LockError",""]],"fn":[["export_xcm","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."],["validate_export","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."]],"mod":[["prelude",""]],"struct":[["Decoded","Implementation of `Convert<Vec<u8>, _>` using the parity scale codec."],["Encoded","Implementation of `Convert<_, Vec<u8>>` using the parity scale codec."],["Identity","Simple pass-through which implements `BytesConversion` while not doing any conversion."],["JustTry","Implementation of `Convert` trait using `TryFrom`."],["WithOriginFilter",""]],"trait":[["AssetExchange","A service for exchanging assets."],["AssetLock","Define a handler for notification of an asset being locked and for the unlock instruction."],["CallDispatcher","Defines how a call is dispatched with given origin. Allows to customize call dispatch, such as adapting the origin based on the call or modifying the call."],["ClaimAssets","Define any handlers for the `AssetClaim` instruction."],["Convert","Generic third-party conversion trait. Use this when you donâ€™t want to force the user to use default implementations of `From` and `Into` for the types you wish to convert between."],["ConvertOrigin","A converter `trait` for origin types."],["DropAssets","Define a handler for when some non-empty `Assets` value should be dropped."],["Enact",""],["ExportXcm","Utility for delivering a message to a system under a different (non-local) consensus with a spoofed origin. This essentially defines the behaviour of the `ExportMessage` XCM instruction."],["FeeManager","Handle stuff to do with taking fees in certain XCM instructions."],["FilterAssetLocation","Filters assets/location pairs."],["MatchesFungible",""],["MatchesFungibles",""],["MatchesNonFungible",""],["MatchesNonFungibles",""],["OnResponse","Define what needs to be done upon receiving a query response."],["ShouldExecute","Trait to determine whether the execution engine should actually execute a given XCM."],["TransactAsset","Facility for asset transacting."],["VersionChangeNotifier","Trait for a type which handles notifying a destination of XCM version changes."],["WeightBounds","Determine the weight of an XCM message."],["WeightTrader","Charge for weight in order to execute XCM."]]};