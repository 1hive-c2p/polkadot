window.SIDEBAR_ITEMS = {"constant":[["PARA_MESSAGE_BUS",""],["RELAY_MESSAGE_BUS",""],["XCM_VERSION","This module’s XCM version."]],"derive":[["Encode","Derive `parity_scale_codec::Encode` and `parity_scale_codec::EncodeLike` for struct and enum."]],"enum":[["AssetId","Classification of an asset being concrete or abstract."],["AssetInstance","A general identifier for an instance of a non-fungible asset class."],["BodyId","An identifier of a pluralistic body."],["BodyPart","A part of a pluralistic body."],["Fungibility","Classification of whether an asset is fungible or not, along with a mandatory amount or instance."],["Instruction","Cross-Consensus Message: A message from one consensus system to another."],["Junction","A single item in a path to describe the relative location of a consensus system."],["Junctions","Non-parent junctions that can be constructed, up to the length of 8. This specific `Junctions` implementation uses a Rust `enum` in order to make pattern matching easier."],["MaybeErrorCode",""],["MessageKind",""],["MultiAssetFilter","`MultiAsset` collection, defined either by a number of `MultiAssets` or a single wildcard."],["NetworkId","A global identifier of a data structure existing within consensus."],["OriginKind","Basically just the XCM (more general) version of `ParachainDispatchOrigin`."],["Outcome","Outcome of an XCM execution."],["Response","Response data to a query."],["SendError","Error result value when attempting to send an XCM message."],["VersionedXcm","A single XCM message, together with its version code."],["WeightLimit","An optional weight limit."],["WildFungibility","Classification of whether an asset is fungible or not."],["WildMultiAsset","A wildcard representing a set of assets."],["XcmError","Error codes used in XCM. The first errors codes have explicit indices and are part of the XCM format. Those trailing are merely part of the XCM implementation; there is no expectation that they will retain the same index over time."],["XcmpMessageFormat","The aggregate XCMP message format."]],"fn":[["blake2_256","Conduct a 256-bit Blake2 hash."],["encode_xcm","Encodes the provided XCM message based on the `message_kind`."],["fake_message_hash",""],["send_xcm","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."],["validate_send","Convenience function for using a `SendXcm` implementation. Just interprets the `dest` and wraps both in `Some` before passing them as as mutable references into `T::send_xcm`."]],"macro":[["__impl_ext","Implements the `TestExt` trait for a specified struct."],["decl_test_network","Declares a test network that consists of a relay chain and multiple parachains. Expects a network struct as an argument and implements testing functionality, `ParachainXcmRouter` and the `RelayChainXcmRouter`. The struct needs to contain the relay chain struct and an indexed list of parachains that are going to be in the network."],["decl_test_parachain","The macro is implementing the `XcmMessageHandlerT` and `DmpMessageHandlerT` traits for the provided parachain struct. Expects the provided parachain struct to define the XcmpMessageHandler and DmpMessageHandler pallets that contain the message handling logic."],["decl_test_relay_chain","The macro is implementing upward message passing(UMP) for the provided relay chain struct. The struct has to provide the XCM configuration for the relay chain."]],"mod":[["dmp","To prevent Out of Memory errors on the `DownwardMessageQueue`, an exponential fee factor (`DeliveryFeeFactor`) is set. The fee factor increments exponentially after the number of messages in the `DownwardMessageQueue` pass a threshold. This threshold is set as:"],["opaque",""],["ump",""]],"struct":[["Ancestor","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value."],["AncestorThen","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value and the inner interior."],["MultiAsset","Either an amount of a single fungible asset, or a single well-identified non-fungible asset."],["MultiAssets","A `Vec` of `MultiAsset`s."],["MultiLocation","A relative path between state-bearing consensus systems."],["PalletInfo",""],["ParaId","Unique identifier of a parachain."],["Parent","A unit struct which can be converted into a `MultiLocation` of `parents` value 1."],["ParentThen","A tuple struct which can be converted into a `MultiLocation` of `parents` value 1 with the inner interior."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["QueryResponseInfo","Information regarding the composition of a query response."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["VecDeque","A double-ended queue implemented with a growable ring buffer."],["Weight",""],["Xcm",""],["XcmContext","Contextual data pertaining to a specific list of XCM instructions."],["XcmExecutor","The XCM executor."],["XcmSink","A specific implementation of a `UmpSink` where messages are in the XCM format and will be forwarded to the XCM Executor."]],"trait":[["DmpMessageHandlerT","Something that should be called when a downward message is received."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["ExecuteXcm","Type of XCM message executor."],["Get","A trait for querying a single value from a type."],["PreparedMessage",""],["SendXcm","Utility for sending an XCM message to a given location."],["TestExt",""],["UmpSink","All upward messages coming from parachains will be funneled into an implementation of this trait."],["Unwrappable",""],["XcmWeightInfo",""],["XcmpMessageHandlerT","Something that should be called for each batch of messages received over XCMP."]],"type":[["InteriorMultiLocation","A relative location which is constrained to be an interior location of the context."],["MessageId","Simple type used to identify messages for the purpose of reporting events. Secure if and only if the message content is unique."],["QueryId","An identifier for a query."],["RelayBlockNumber","The block number type used by Polkadot. 32-bits will allow for 136 years of blocks assuming 1 block per second."],["SendResult","Result value when attempting to send an XCM message."],["TestExternalities","Type alias for Externalities implementation used in tests."],["XcmHash","A hash type for identifying messages."],["XcmResult",""]]};