window.SIDEBAR_ITEMS = {"constant":[["LOWEST_PUBLIC_ID","The ID of the first publicly registerable parachain."]],"enum":[["RuntimeMetricOp","Runtime metric operations."]],"mod":[["metric_definitions","Contains all runtime metrics defined as constants."],["runtime_api","Runtime API module declares the `trait ParachainHost` which is part of the Runtime API exposed from the Runtime to the Host."],["v4","`V1` Primitives."],["vstaging","Staging Primitives."]],"struct":[["BlakeTwo256","Blake2-256 Hash implementation."],["CandidateHash","Unit type wrapper around [`type@Hash`] that represents a candidate hash."],["HeadData","Parachain head data included in the chain."],["HrmpChannelId","A type that uniquely identifies an HRMP channel. An HRMP channel is established between two paras. In text, we use the notation `(A, B)` to specify a channel between A and B. The channels are unidirectional, meaning that `(A, B)` and `(B, A)` refer to different channels. The convention is that we use the first item tuple for the sender and the second for the recipient. Only one channel is allowed between two participants in one direction, i.e. there cannot be 2 different channels identified by `(A, B)`. A channel with the same para id in sender and recipient is invalid. That is, however, not enforced."],["Id","Unique identifier of a parachain."],["InboundDownwardMessage","A wrapped version of `DownwardMessage`. The difference is that it has attached the block number when the message was sent."],["InboundHrmpMessage","An HRMP message seen from the perspective of a recipient."],["OutboundHrmpMessage","An HRMP message seen from the perspective of a sender."],["RuntimeMetricLabel","A metric label."],["RuntimeMetricLabels","A set of metric labels."],["RuntimeMetricUpdate","Runtime metric update event."],["Signed","Signed data with signature already verified."],["Slot","Unit type wrapper that represents a slot."],["UncheckedSigned","Unchecked signed data, can be converted to `Signed` by checking the signature."],["ValidationCode","Parachain validation code."],["ValidationCodeHash","Unit type wrapper around [`type@Hash`] that represents a validation code hash."]],"trait":[["EncodeAs","This helper trait ensures that we can encode `Statement` as `CompactStatement`, and anything as itself."],["HashT","Abstraction around hashing"]],"type":[["AccountId","Alias to the opaque account ID type for this chain, actually a `AccountId32`. This is always 32 bytes."],["AccountIndex","The type for looking up accounts. We don’t expect more than 4 billion of them."],["AccountPublic","Alias to the public key used for this chain, actually a `MultiSigner`. Like the signature, this also isn’t a fixed size when encoded, as different cryptos have different size public keys."],["AuthorityDiscoveryId","An authority discovery authority identifier."],["Balance","The balance of an account. 128-bits (or 38 significant decimal figures) will allow for 10 m currency (`10^7`) at a resolution to all for one second’s worth of an annualised 50% reward be paid to a unit holder (`10^11` unit denomination), or `10^18` total atomic units, to grow at 50%/year for 51 years (`10^9` multiplier) for an eventual total of `10^27` units (27 significant decimal figures). We round denomination to `10^12` (12 SDF), and leave the other redundancy at the upper end so that 32 bits may be multiplied with a balance in 128 bits without worrying about overflow."],["Block","Block type."],["BlockId","Block ID."],["BlockNumber","The block number type used by Polkadot. 32-bits will allow for 136 years of blocks assuming 1 block per second."],["DownwardMessage","A message sent from the relay-chain down to a parachain."],["Hash","A hash of some data used by the relay chain."],["Header","Header type."],["Moment","An instant or duration in time."],["Nonce","Index of a transaction in the relay chain. 32-bit should be plenty."],["RuntimeMetricLabelValue","A metric label value."],["RuntimeMetricLabelValues","A set of metric label values."],["SessionIndex","Simple index type with which we can count sessions."],["Signature","Alias to type for a signature for a transaction on the relay chain. This allows one of several kinds of underlying crypto to be used, so isn’t a fixed size when encoded."],["UpwardMessage","A message from a parachain to its Relay Chain."]]};