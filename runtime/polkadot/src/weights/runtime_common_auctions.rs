// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `runtime_common::auctions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `10`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot
// benchmark
// pallet
// --chain=polkadot-dev
// --steps=10
// --repeat=1
// --pallet=runtime_common::auctions
// --extrinsic=*
// --execution=native
// --header=./file_header.txt
// --output=./runtime/polkadot/src/weights/runtime_common_auctions.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `runtime_common::auctions`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> runtime_common::auctions::WeightInfo for WeightInfo<T> {
	/// Storage: Auctions AuctionInfo (r:1 w:1)
	/// Proof: Auctions AuctionInfo (max_values: Some(1), max_size: Some(8), added: 503)
	/// Storage: Auctions AuctionCounter (r:1 w:1)
	/// Proof: Auctions AuctionCounter (max_values: Some(1), max_size: Some(4), added: 499)
	fn new_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `994`
		// Minimum execution time: 11_742 nanoseconds.
		Weight::from_parts(11_742_000, 994)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Paras ParaLifecycles (r:1 w:0)
	/// Proof Skipped: Paras ParaLifecycles (max_values: None, max_size: None)
	/// Storage: Auctions AuctionCounter (r:1 w:0)
	/// Proof: Auctions AuctionCounter (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Auctions AuctionInfo (r:1 w:0)
	/// Proof: Auctions AuctionInfo (max_values: Some(1), max_size: Some(8), added: 503)
	/// Storage: Slots Leases (r:1 w:0)
	/// Proof Skipped: Slots Leases (max_values: None, max_size: None)
	/// Storage: Auctions Winning (r:1 w:1)
	/// Proof: Auctions Winning (max_values: None, max_size: Some(1920), added: 4395)
	/// Storage: Auctions ReservedAmounts (r:2 w:2)
	/// Proof: Auctions ReservedAmounts (max_values: None, max_size: Some(60), added: 2535)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `725`
		//  Estimated: `16565`
		// Minimum execution time: 46_328 nanoseconds.
		Weight::from_parts(46_328_000, 16565)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Auctions AuctionInfo (r:1 w:1)
	/// Proof: Auctions AuctionInfo (max_values: Some(1), max_size: Some(8), added: 503)
	/// Storage: Babe NextRandomness (r:1 w:0)
	/// Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527)
	/// Storage: Babe EpochStart (r:1 w:0)
	/// Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503)
	/// Storage: Auctions AuctionCounter (r:1 w:0)
	/// Proof: Auctions AuctionCounter (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Auctions Winning (r:3600 w:3600)
	/// Proof: Auctions Winning (max_values: None, max_size: Some(1920), added: 4395)
	/// Storage: Auctions ReservedAmounts (r:37 w:36)
	/// Proof: Auctions ReservedAmounts (max_values: None, max_size: Some(60), added: 2535)
	/// Storage: System Account (r:36 w:36)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Slots Leases (r:7 w:7)
	/// Proof Skipped: Slots Leases (max_values: None, max_size: None)
	/// Storage: Paras ParaLifecycles (r:1 w:1)
	/// Proof Skipped: Paras ParaLifecycles (max_values: None, max_size: None)
	/// Storage: ParasShared CurrentSessionIndex (r:1 w:0)
	/// Proof Skipped: ParasShared CurrentSessionIndex (max_values: Some(1), max_size: None)
	/// Storage: Paras ActionsQueue (r:1 w:1)
	/// Proof Skipped: Paras ActionsQueue (max_values: None, max_size: None)
	/// Storage: Registrar Paras (r:1 w:1)
	/// Proof Skipped: Registrar Paras (max_values: None, max_size: None)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7060445`
		//  Estimated: `16178345`
		// Minimum execution time: 21_093_381 nanoseconds.
		Weight::from_parts(21_093_381_000, 16178345)
			.saturating_add(T::DbWeight::get().reads(3688))
			.saturating_add(T::DbWeight::get().writes(3683))
	}
	/// Storage: Auctions ReservedAmounts (r:37 w:36)
	/// Proof: Auctions ReservedAmounts (max_values: None, max_size: Some(60), added: 2535)
	/// Storage: System Account (r:36 w:36)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Auctions Winning (r:0 w:3600)
	/// Proof: Auctions Winning (max_values: None, max_size: Some(1920), added: 4395)
	/// Storage: Auctions AuctionInfo (r:0 w:1)
	/// Proof: Auctions AuctionInfo (max_values: Some(1), max_size: Some(8), added: 503)
	fn cancel_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178884`
		//  Estimated: `359559`
		// Minimum execution time: 5_445_415 nanoseconds.
		Weight::from_parts(5_445_415_000, 359559)
			.saturating_add(T::DbWeight::get().reads(73))
			.saturating_add(T::DbWeight::get().writes(3673))
	}
}
