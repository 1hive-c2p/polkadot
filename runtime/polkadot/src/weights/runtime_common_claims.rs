// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `runtime_common::claims`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `10`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot
// benchmark
// pallet
// --chain=polkadot-dev
// --steps=10
// --repeat=1
// --pallet=runtime_common::claims
// --extrinsic=*
// --execution=native
// --header=./file_header.txt
// --output=./runtime/polkadot/src/weights/runtime_common_claims.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `runtime_common::claims`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> runtime_common::claims::WeightInfo for WeightInfo<T> {
	/// Storage: Claims Claims (r:1 w:1)
	/// Proof Skipped: Claims Claims (max_values: None, max_size: None)
	/// Storage: Claims Signing (r:1 w:1)
	/// Proof Skipped: Claims Signing (max_values: None, max_size: None)
	/// Storage: Claims Total (r:1 w:1)
	/// Proof Skipped: Claims Total (max_values: Some(1), max_size: None)
	/// Storage: Claims Vesting (r:1 w:1)
	/// Proof Skipped: Claims Vesting (max_values: None, max_size: None)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `618`
		//  Estimated: `15963`
		// Minimum execution time: 131_459 nanoseconds.
		Weight::from_parts(131_459_000, 15963)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Claims Total (r:1 w:1)
	/// Proof Skipped: Claims Total (max_values: Some(1), max_size: None)
	/// Storage: Claims Vesting (r:0 w:1)
	/// Proof Skipped: Claims Vesting (max_values: None, max_size: None)
	/// Storage: Claims Claims (r:0 w:1)
	/// Proof Skipped: Claims Claims (max_values: None, max_size: None)
	/// Storage: Claims Signing (r:0 w:1)
	/// Proof Skipped: Claims Signing (max_values: None, max_size: None)
	fn mint_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `677`
		// Minimum execution time: 9_037 nanoseconds.
		Weight::from_parts(9_037_000, 677)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Claims Claims (r:1 w:1)
	/// Proof Skipped: Claims Claims (max_values: None, max_size: None)
	/// Storage: Claims Signing (r:1 w:1)
	/// Proof Skipped: Claims Signing (max_values: None, max_size: None)
	/// Storage: Claims Total (r:1 w:1)
	/// Proof Skipped: Claims Total (max_values: Some(1), max_size: None)
	/// Storage: Claims Vesting (r:1 w:1)
	/// Proof Skipped: Claims Vesting (max_values: None, max_size: None)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	fn claim_attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `618`
		//  Estimated: `15963`
		// Minimum execution time: 132_831 nanoseconds.
		Weight::from_parts(132_831_000, 15963)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Claims Preclaims (r:1 w:1)
	/// Proof Skipped: Claims Preclaims (max_values: None, max_size: None)
	/// Storage: Claims Signing (r:1 w:1)
	/// Proof Skipped: Claims Signing (max_values: None, max_size: None)
	/// Storage: Claims Claims (r:1 w:1)
	/// Proof Skipped: Claims Claims (max_values: None, max_size: None)
	/// Storage: Claims Total (r:1 w:1)
	/// Proof Skipped: Claims Total (max_values: Some(1), max_size: None)
	/// Storage: Claims Vesting (r:1 w:1)
	/// Proof Skipped: Claims Vesting (max_values: None, max_size: None)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	fn attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `18512`
		// Minimum execution time: 56_066 nanoseconds.
		Weight::from_parts(56_066_000, 18512)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Claims Claims (r:1 w:2)
	/// Proof Skipped: Claims Claims (max_values: None, max_size: None)
	/// Storage: Claims Vesting (r:1 w:2)
	/// Proof Skipped: Claims Vesting (max_values: None, max_size: None)
	/// Storage: Claims Signing (r:1 w:2)
	/// Proof Skipped: Claims Signing (max_values: None, max_size: None)
	/// Storage: Claims Preclaims (r:1 w:1)
	/// Proof Skipped: Claims Preclaims (max_values: None, max_size: None)
	fn move_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `438`
		//  Estimated: `10338`
		// Minimum execution time: 17_463 nanoseconds.
		Weight::from_parts(17_463_000, 10338)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(7))
	}
}
