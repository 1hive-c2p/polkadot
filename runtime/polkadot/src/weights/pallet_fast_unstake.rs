// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_fast_unstake`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `10`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot
// benchmark
// pallet
// --chain=polkadot-dev
// --steps=10
// --repeat=1
// --pallet=pallet_fast_unstake
// --extrinsic=*
// --execution=native
// --header=./file_header.txt
// --output=./runtime/polkadot/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_fast_unstake`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T> {
	/// Storage: FastUnstake ErasToCheckPerBlock (r:1 w:0)
	/// Proof: FastUnstake ErasToCheckPerBlock (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking ValidatorCount (r:1 w:0)
	/// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: ElectionProviderMultiPhase CurrentPhase (r:1 w:0)
	/// Proof Skipped: ElectionProviderMultiPhase CurrentPhase (max_values: Some(1), max_size: None)
	/// Storage: FastUnstake Head (r:1 w:1)
	/// Proof: FastUnstake Head (max_values: Some(1), max_size: Some(3191), added: 3686)
	/// Storage: Staking CurrentEra (r:1 w:0)
	/// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking SlashingSpans (r:64 w:0)
	/// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None)
	/// Storage: Staking Bonded (r:64 w:64)
	/// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547)
	/// Storage: Staking Validators (r:64 w:0)
	/// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520)
	/// Storage: Staking Nominators (r:64 w:0)
	/// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033)
	/// Storage: System Account (r:64 w:64)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:64 w:64)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: Staking Ledger (r:0 w:64)
	/// Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566)
	/// Storage: Staking Payee (r:0 w:64)
	/// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548)
	fn on_idle_unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `25350`
		//  Estimated: `978225`
		// Minimum execution time: 1_846_958 nanoseconds.
		Weight::from_parts(1_846_958_000, 978225)
			.saturating_add(T::DbWeight::get().reads(389))
			.saturating_add(T::DbWeight::get().writes(321))
	}
	/// Storage: FastUnstake ErasToCheckPerBlock (r:1 w:0)
	/// Proof: FastUnstake ErasToCheckPerBlock (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking ValidatorCount (r:1 w:0)
	/// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: ElectionProviderMultiPhase CurrentPhase (r:1 w:0)
	/// Proof Skipped: ElectionProviderMultiPhase CurrentPhase (max_values: Some(1), max_size: None)
	/// Storage: FastUnstake Head (r:1 w:1)
	/// Proof: FastUnstake Head (max_values: Some(1), max_size: Some(3191), added: 3686)
	/// Storage: FastUnstake Queue (r:65 w:64)
	/// Proof: FastUnstake Queue (max_values: None, max_size: Some(56), added: 2531)
	/// Storage: FastUnstake CounterForQueue (r:1 w:1)
	/// Proof: FastUnstake CounterForQueue (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking CurrentEra (r:1 w:0)
	/// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking ErasStakers (r:3612 w:0)
	/// Proof Skipped: Staking ErasStakers (max_values: None, max_size: None)
	/// The range of component `x` is `[28, 3584]`.
	fn on_idle_check(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7274 + x * (4911 ±0)`
		//  Estimated: `240946 + x * (7367 ±0)`
		// Minimum execution time: 27_951_151 nanoseconds.
		Weight::from_parts(27_951_151_000, 240946)
			// Standard Error: 4_573_213
			.saturating_add(Weight::from_ref_time(790_402_515).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(95))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(66))
			.saturating_add(Weight::from_proof_size(7367).saturating_mul(x.into()))
	}
	/// Storage: FastUnstake ErasToCheckPerBlock (r:1 w:0)
	/// Proof: FastUnstake ErasToCheckPerBlock (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking Ledger (r:1 w:1)
	/// Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566)
	/// Storage: FastUnstake Queue (r:1 w:1)
	/// Proof: FastUnstake Queue (max_values: None, max_size: Some(56), added: 2531)
	/// Storage: FastUnstake Head (r:1 w:0)
	/// Proof: FastUnstake Head (max_values: Some(1), max_size: Some(3191), added: 3686)
	/// Storage: Staking Bonded (r:1 w:0)
	/// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547)
	/// Storage: Staking Validators (r:1 w:0)
	/// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520)
	/// Storage: Staking Nominators (r:1 w:1)
	/// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033)
	/// Storage: Staking CounterForNominators (r:1 w:1)
	/// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: VoterList ListNodes (r:3 w:3)
	/// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629)
	/// Storage: VoterList CounterForListNodes (r:1 w:1)
	/// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking CurrentEra (r:1 w:0)
	/// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: FastUnstake CounterForQueue (r:1 w:1)
	/// Proof: FastUnstake CounterForQueue (max_values: Some(1), max_size: Some(4), added: 499)
	fn register_fast_unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5302`
		//  Estimated: `30547`
		// Minimum execution time: 92_906 nanoseconds.
		Weight::from_parts(92_906_000, 30547)
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: FastUnstake ErasToCheckPerBlock (r:1 w:0)
	/// Proof: FastUnstake ErasToCheckPerBlock (max_values: Some(1), max_size: Some(4), added: 499)
	/// Storage: Staking Ledger (r:1 w:0)
	/// Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566)
	/// Storage: FastUnstake Queue (r:1 w:1)
	/// Proof: FastUnstake Queue (max_values: None, max_size: Some(56), added: 2531)
	/// Storage: FastUnstake Head (r:1 w:0)
	/// Proof: FastUnstake Head (max_values: Some(1), max_size: Some(3191), added: 3686)
	/// Storage: FastUnstake CounterForQueue (r:1 w:1)
	/// Proof: FastUnstake CounterForQueue (max_values: Some(1), max_size: Some(4), added: 499)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1952`
		//  Estimated: `8387`
		// Minimum execution time: 35_287 nanoseconds.
		Weight::from_parts(35_287_000, 8387)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: FastUnstake ErasToCheckPerBlock (r:0 w:1)
	/// Proof: FastUnstake ErasToCheckPerBlock (max_values: Some(1), max_size: Some(4), added: 499)
	fn control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_054 nanoseconds.
		Weight::from_ref_time(7_054_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
