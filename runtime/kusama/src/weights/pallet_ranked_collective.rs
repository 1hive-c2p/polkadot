// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_ranked_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `10`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=10
// --repeat=1
// --pallet=pallet_ranked_collective
// --extrinsic=*
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ranked_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ranked_collective::WeightInfo for WeightInfo<T> {
	/// Storage: FellowshipCollective Members (r:1 w:1)
	/// Proof: FellowshipCollective Members (max_values: None, max_size: Some(42), added: 2517)
	/// Storage: FellowshipCollective MemberCount (r:1 w:1)
	/// Proof: FellowshipCollective MemberCount (max_values: None, max_size: Some(14), added: 2489)
	/// Storage: FellowshipCollective IndexToId (r:0 w:1)
	/// Proof: FellowshipCollective IndexToId (max_values: None, max_size: Some(54), added: 2529)
	/// Storage: FellowshipCollective IdToIndex (r:0 w:1)
	/// Proof: FellowshipCollective IdToIndex (max_values: None, max_size: Some(54), added: 2529)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `5026`
		// Minimum execution time: 27_442 nanoseconds.
		Weight::from_parts(27_442_000, 5026)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: FellowshipCollective Members (r:1 w:1)
	/// Proof: FellowshipCollective Members (max_values: None, max_size: Some(42), added: 2517)
	/// Storage: FellowshipCollective MemberCount (r:11 w:11)
	/// Proof: FellowshipCollective MemberCount (max_values: None, max_size: Some(14), added: 2489)
	/// Storage: FellowshipCollective IdToIndex (r:11 w:11)
	/// Proof: FellowshipCollective IdToIndex (max_values: None, max_size: Some(54), added: 2529)
	/// Storage: FellowshipCollective IndexToId (r:11 w:11)
	/// Proof: FellowshipCollective IndexToId (max_values: None, max_size: Some(54), added: 2529)
	/// The range of component `r` is `[0, 10]`.
	fn remove_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552 + r * (280 ±0)`
		//  Estimated: `10452 + r * (7705 ±0)`
		// Minimum execution time: 40_056 nanoseconds.
		Weight::from_parts(46_406_348, 10452)
			// Standard Error: 1_188_445
			.saturating_add(Weight::from_ref_time(4_598_424).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_proof_size(7705).saturating_mul(r.into()))
	}
	/// Storage: FellowshipCollective Members (r:1 w:1)
	/// Proof: FellowshipCollective Members (max_values: None, max_size: Some(42), added: 2517)
	/// Storage: FellowshipCollective MemberCount (r:1 w:1)
	/// Proof: FellowshipCollective MemberCount (max_values: None, max_size: Some(14), added: 2489)
	/// Storage: FellowshipCollective IndexToId (r:0 w:1)
	/// Proof: FellowshipCollective IndexToId (max_values: None, max_size: Some(54), added: 2529)
	/// Storage: FellowshipCollective IdToIndex (r:0 w:1)
	/// Proof: FellowshipCollective IdToIndex (max_values: None, max_size: Some(54), added: 2529)
	/// The range of component `r` is `[0, 10]`.
	fn promote_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + r * (17 ±0)`
		//  Estimated: `5198 + r * (17 ±0)`
		// Minimum execution time: 14_077 nanoseconds.
		Weight::from_parts(14_136_515, 5198)
			// Standard Error: 41_237
			.saturating_add(Weight::from_ref_time(254_257).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_proof_size(17).saturating_mul(r.into()))
	}
	/// Storage: FellowshipCollective Members (r:1 w:1)
	/// Proof: FellowshipCollective Members (max_values: None, max_size: Some(42), added: 2517)
	/// Storage: FellowshipCollective MemberCount (r:1 w:1)
	/// Proof: FellowshipCollective MemberCount (max_values: None, max_size: Some(14), added: 2489)
	/// Storage: FellowshipCollective IdToIndex (r:1 w:1)
	/// Proof: FellowshipCollective IdToIndex (max_values: None, max_size: Some(54), added: 2529)
	/// Storage: FellowshipCollective IndexToId (r:1 w:1)
	/// Proof: FellowshipCollective IndexToId (max_values: None, max_size: Some(54), added: 2529)
	/// The range of component `r` is `[0, 10]`.
	fn demote_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566 + r * (72 ±0)`
		//  Estimated: `10466 + r * (72 ±0)`
		// Minimum execution time: 19_737 nanoseconds.
		Weight::from_parts(24_388_331, 10466)
			// Standard Error: 287_115
			.saturating_add(Weight::from_ref_time(420_558).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_proof_size(72).saturating_mul(r.into()))
	}
	/// Storage: FellowshipCollective Members (r:1 w:0)
	/// Proof: FellowshipCollective Members (max_values: None, max_size: Some(42), added: 2517)
	/// Storage: FellowshipReferenda ReferendumInfoFor (r:1 w:1)
	/// Proof: FellowshipReferenda ReferendumInfoFor (max_values: None, max_size: Some(836), added: 3311)
	/// Storage: FellowshipCollective Voting (r:1 w:1)
	/// Proof: FellowshipCollective Voting (max_values: None, max_size: Some(65), added: 2540)
	/// Storage: Scheduler Agenda (r:2 w:2)
	/// Proof: Scheduler Agenda (max_values: None, max_size: Some(35763), added: 38238)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726`
		//  Estimated: `13101`
		// Minimum execution time: 67_739 nanoseconds.
		Weight::from_parts(67_739_000, 13101)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: FellowshipReferenda ReferendumInfoFor (r:1 w:0)
	/// Proof: FellowshipReferenda ReferendumInfoFor (max_values: None, max_size: Some(836), added: 3311)
	/// Storage: FellowshipCollective VotingCleanup (r:1 w:0)
	/// Proof: FellowshipCollective VotingCleanup (max_values: None, max_size: Some(114), added: 2589)
	/// Storage: FellowshipCollective Voting (r:0 w:100)
	/// Proof: FellowshipCollective Voting (max_values: None, max_size: Some(65), added: 2540)
	/// The range of component `n` is `[0, 100]`.
	fn cleanup_poll(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500 + n * (50 ±0)`
		//  Estimated: `5450 + n * (50 ±0)`
		// Minimum execution time: 25_849 nanoseconds.
		Weight::from_parts(27_517_474, 5450)
			// Standard Error: 90_578
			.saturating_add(Weight::from_ref_time(908_365).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(50).saturating_mul(n.into()))
	}
}
