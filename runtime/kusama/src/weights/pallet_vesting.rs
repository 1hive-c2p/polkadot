// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_vesting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `10`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=10
// --repeat=1
// --pallet=pallet_vesting
// --extrinsic=*
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_vesting`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `5327 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 22_292 nanoseconds.
		Weight::from_parts(20_082_585, 5327)
			// Standard Error: 8_296
			.saturating_add(Weight::from_ref_time(51_725).saturating_mul(l.into()))
			// Standard Error: 15_213
			.saturating_add(Weight::from_ref_time(70_534).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `5327 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 21_711 nanoseconds.
		Weight::from_parts(20_357_610, 5327)
			// Standard Error: 10_233
			.saturating_add(Weight::from_ref_time(37_602).saturating_mul(l.into()))
			// Standard Error: 18_766
			.saturating_add(Weight::from_ref_time(47_796).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7937 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 22_883 nanoseconds.
		Weight::from_parts(21_544_166, 7937)
			// Standard Error: 6_345
			.saturating_add(Weight::from_ref_time(54_219).saturating_mul(l.into()))
			// Standard Error: 11_636
			.saturating_add(Weight::from_ref_time(62_365).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7937 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 22_773 nanoseconds.
		Weight::from_parts(20_534_499, 7937)
			// Standard Error: 34_248
			.saturating_add(Weight::from_ref_time(72_935).saturating_mul(l.into()))
			// Standard Error: 62_802
			.saturating_add(Weight::from_ref_time(68_397).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `8008 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 35_186 nanoseconds.
		Weight::from_parts(34_458_272, 8008)
			// Standard Error: 9_793
			.saturating_add(Weight::from_ref_time(20_307).saturating_mul(l.into()))
			// Standard Error: 17_958
			.saturating_add(Weight::from_ref_time(56_011).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `718 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `10618 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 36_259 nanoseconds.
		Weight::from_parts(32_656_672, 10618)
			// Standard Error: 48_556
			.saturating_add(Weight::from_ref_time(89_836).saturating_mul(l.into()))
			// Standard Error: 89_040
			.saturating_add(Weight::from_ref_time(117_054).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7935 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 23_745 nanoseconds.
		Weight::from_parts(18_821_816, 7935)
			// Standard Error: 76_471
			.saturating_add(Weight::from_ref_time(89_807).saturating_mul(l.into()))
			// Standard Error: 141_937
			.saturating_add(Weight::from_ref_time(254_880).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7935 + l * (25 ±0) + s * (36 ±0)`
		// Minimum execution time: 24_116 nanoseconds.
		Weight::from_parts(22_268_011, 7935)
			// Standard Error: 6_711
			.saturating_add(Weight::from_ref_time(58_770).saturating_mul(l.into()))
			// Standard Error: 12_456
			.saturating_add(Weight::from_ref_time(70_471).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_proof_size(25).saturating_mul(l.into()))
			.saturating_add(Weight::from_proof_size(36).saturating_mul(s.into()))
	}
}
