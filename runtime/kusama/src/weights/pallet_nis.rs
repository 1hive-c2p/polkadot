// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_nis`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm4`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=pallet_nis
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_nis`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nis::WeightInfo for WeightInfo<T> {
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn place_bid(l: u32, ) -> Weight {
		// Minimum execution time: 42_332 nanoseconds.
		Weight::from_ref_time(45_584_514 as u64)
			// Standard Error: 129
			.saturating_add(Weight::from_ref_time(45_727 as u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn place_bid_max() -> Weight {
		// Minimum execution time: 85_866 nanoseconds.
		Weight::from_ref_time(87_171_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn retract_bid(l: u32, ) -> Weight {
		// Minimum execution time: 44_605 nanoseconds.
		Weight::from_ref_time(46_850_108 as u64)
			// Standard Error: 135
			.saturating_add(Weight::from_ref_time(34_178 as u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nis Active (r:1 w:1)
	// Storage: Nis ActiveTotal (r:1 w:1)
	fn thaw() -> Weight {
		// Minimum execution time: 55_143 nanoseconds.
		Weight::from_ref_time(55_845_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nis Active (r:1 w:1)
	// Storage: Nis ActiveTotal (r:1 w:1)
	fn fund_deficit() -> Weight {
		Weight::from_ref_time(47_753_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nis ActiveTotal (r:1 w:0)
	fn process_queues() -> Weight {
		Weight::from_ref_time(1_663_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Nis ActiveTotal (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis Active (r:0 w:1)
	fn process_queue() -> Weight {
		Weight::from_ref_time(40_797_000 as u64)
			// Standard Error: 1_000
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Nis ActiveTotal (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis Active (r:0 w:1)
	fn process_bid() -> Weight {
		Weight::from_ref_time(14_944_000 as u64)
			// Standard Error: 6_000
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
